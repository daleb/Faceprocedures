<!DOCTYPE html>
<html>
  <head lang="en">
    <meta charset="UTF-8">
    <title>webcam test</title>
  </head>
  <body>

    <h1>Webcam Recorder</h1>


<%#*<div id="label1">%>
<%#*Recording Time:%>
<%#*</div>%>
<%#*<select id="videotime" >%>
<%#*<option value="5"> 5</option>%>
<%#*<option value="10">10</option>%>
<%#*<option value="15">15</option>%>
<%#*<option value="20">20</option>%>
<%#*<option value="25">25</option>%>
<%#*</select>%>

<%#*<div id="label2">%>
<%#*sec%>
<%#*</div>%>

    <input id="startbutton" type="button" value="Start!" />
    <input id="stopbutton" type="button" value="Stop!" />


    <div id="counter">
    </div>

    <div id="links">

    </div>
    <div id="views">

    </div>


<div id="videodiv">
  <video id="video-playback" ></video>
</div>

  <script>

    var counter;
    var enableCounter=false;
    var recordRTC;
    var videoPlayback;
    var videoLive;
    var recordedBlob;
    var refid = 1;
    var videoList = new Array();

    const MIME_TYPE = "video/webm";

    var videoConstraints = {
      video: {
        mandatory: {
          minWidth: 1280,
          minHeight: 720
        }
      }
    };

    var record_options = {
      type: "video",
      video: {
        width: 1280,
        height: 720,
        framerate: 100
      },
      canvas: {
        width: 1280,
        height: 720
      }
    };

    navigator.getUserMedia =    (navigator.getUserMedia ||
      navigator.webkitGetUserMedia ||
      navigator.mozGetUserMedia ||
      navigator.msGetUserMedia);


    // DOM ready for event hooking
    $(function () {
      $("#startbutton").click(start);
      $("#stopbutton").click(stop);
      $("#stopbutton").attr("disabled", "disabled");
      $("#stopbutton").hide();
      $("#videotime").val(5);
      videoLive = document.getElementById("video-view");
      videoPlayback = document.getElementById("video-playback");
        
    });

    function start() {
      navigator.getUserMedia(videoConstraints, startRecording, onfailure);
    }

    function onfailure(){
      console.log("Failed to get camera");
    }




  


    function startRecording(mediaStream){
      console.log(mediaStream);
      setTimeout(stop, 5 * 1000);
      recordRTC = RecordRTC(mediaStream, record_options);
      starttimer();
      recordRTC.startRecording();
      $("#startbutton").attr("disabled", "disabled");
      $("#stopbutton").removeAttr("disabled");
       
    }

    function stop() {
      stoptimer();
      recordRTC.stopRecording(playback);
      $("#startbutton").removeAttr("disabled");
      $("#stopbutton").attr("disabled", "disabled");
      ("#views").hide()
    }
    function replay(idx){
      playvideo(videoList[idx]);
    }

    function playback(stream){
      playvideo(stream);
      filename = "videofile" + refid + ".webm";
      $("#links").append("<a id=lk" + refid + " href=" + stream +  "  download= " + filename + "> Download Video " + refid + " </a> <br>" );
      videoList[refid]= stream;
      var bname = "Replay_Video_" + refid;
      $("#views").append("<input type=button id=vw" + refid + " onclick=replay(" + refid + ") value=" + bname + "> <br>");
      refid += 1;
    }
    function playvideo(stream){
      videoPlayback.src = stream;
      videoPlayback.play();
      recordedBlob = recordRTC.getBlob();
      //recordRTC.getDataURL(function(dataURL) { });
    }

    function starttimer(){
      counter = 0;
      enableCounter = true;
      updateCounterDisplay();
      setTimeout(ticktock, 100);
    }
    function stoptimer(){
      enableCounter = false;
    }

    function ticktock() {
      if(enableCounter){
        counter += .1;
        updateCounterDisplay();
        setTimeout(ticktock, 100);
      }
    }
    function updateCounterDisplay(){
      $("#counter").html(Math.round(counter * 10) / 10);
    }
    function recordtimer(timevalue){
      recordtime = $("#videotime").val();
      setTimeout(stop, recordtime * 1000);
    }

  </script>


</body>


</html>