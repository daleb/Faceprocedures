<div class="container-fluid">


<%if @from!="result"%>
<!--
<div class="options">
  <button class="split" value="split" type="button">Split</button>
  <button class="takeall" value="takeall" type="button">Take All</button>
</div>-->
<div class="note">
	<div class="container2">
	<div class="row">
		<div class="col-md-10 col-md-offset-1">
			<h3 class="text-center">Statement</h3>
		</div>

		<b><h3 class="note col-md-12 text-left" style="font-size:200%">When you are ready, click the button below to start recording and speak out loud your chosen statement.  Remember, you will be free to choose either "Split" or "Take" regardless of your chosen statement.  Below are two statements about the action you intend to take in your upcoming interaction.  To proceed you need to make one of the following statements out loud.</br>
        </h3></br>
          <h3 class="note col-md-12 text-center" style="font-size:200%">
            1) I intend to split</br></br>
            2) I intend to take</h3></b>
	</div>
		<div class="text-center">
			<a href="#" class="btn btn-default btn-primary btn-lg record-btn"> Recording statement...</a>
		</div>
		</div>
</div>

<div class="action_note text-center"><b><h3>Click your choice below. These are the choices that will affect payouts in the two-person interaction.</h3></b></div>
	<div class="col-md-6 col-md-offset-5" id="video-btn">
		<a href="#" class="btn btn-success" id="split" value="split">Split</a> &nbsp;&nbsp;&nbsp;&nbsp;
		<a href="#" class="btn btn-success" id="takeall" value="takeall">Take All</a>
</div>

<%end%>
    <%=hidden_field 'coming','from', :value=>@from%>
    <%=hidden_field 'part','id', :value=>session[:computerid]%>
    <%=hidden_field 'recording','for', :value=>session[:recording_for]%>
    <%=hidden_field 'recording','time', :value=>$gConfigData.time%>
    <div id="views">

    </div>
    
    <div class="hourclass text-center disabled="disabled"">
    	<img src="<%= asset_path 'hourglass.gif' %>" class="hourclass" />
    	<h3>Retrieving your result</h3>
    </div>
    
    <h1 class="score text-center" disabled="disabled">
	<%= "Your payoff is #{session[$round].to_i}"%></br></br>
	<%="You chose #{session[:myoption]}"%></br></br>
	<%="The other person chose #{session[:partneroption]}"%>
   </h1>

<div id="videodiv">
  <video id="video-playback" ></video>
</div>
</div>
<script src='/jquery-2.0.3.min.js'></script>
  <script>

    var counter;
    var enableCounter=false;
    var recordRTC;
    var videoPlayback;
    var videoLive;
    var recordedBlob;
    var refid = 1;
    var videoList = new Array();
    var record_time = parseInt('<%= $gConfigData.time %>')

    const MIME_TYPE = "video/webm";

    var videoConstraints = {
      video: {
        mandatory: {
          minWidth: 1280,
          minHeight: 720
        }
      },
      audio: true
    };

    var record_options = {
      type: "video",
      video: {
        width: 1280,
        height: 720,
        framerate: 10
      },
      canvas: {
        width: 1280,
        height: 720
      }
    };

    navigator.getUserMedia =    (navigator.getUserMedia ||
      navigator.webkitGetUserMedia ||
      navigator.mozGetUserMedia ||
      navigator.msGetUserMedia);


    // DOM ready for event hooking
    $(function () {
      navigator.getUserMedia(videoConstraints, startRecording, onfailure);
      videoLive = document.getElementById("video-view");
      videoPlayback = document.getElementById("video-playback");
      $("#videodiv").hide();
        
    });

    function start() {
      navigator.getUserMedia(videoConstraints, startRecording, onfailure);
    }

    function onfailure(){
      console.log("Failed to get camera");
    }




  


    function startRecording(mediaStream){
      setTimeout(stop, record_time * 1000);
      recordRTC = RecordRTC(mediaStream, record_options);
      starttimer();
      recordRTC.startRecording();
      //recordRTC.startRecording();
      $("#startbutton").attr("disabled", "disabled");
      $("#stopbutton").removeAttr("disabled");
       
    }

    function stop() {
      stoptimer();
      recordRTC.stopRecording(playback);
      $("#startbutton").removeAttr("disabled");
      $("#stopbutton").attr("disabled", "disabled");
      //("#views").hide()
    }
    function replay(idx){
      playvideo(videoList[idx]);
    }

    function playback(stream){
      //playvideo(stream);
        var fileType = 'video';
        var fileName = 'ABCDEF.webm';
        var recordedBlob = recordRTC.getBlob(); 
        var xhr = new XMLHttpRequest();
        var fd = new FormData();
        var part_id=$('#part_id').val()
        var recording_for=$('#recording_for').val()
        fd.append("video-blob", recordedBlob);
        sync = $('#coming_from').val() == "result" ? false : true
        xhr.open("POST", "/participant/save?part_id="+part_id + "&recording_for=" + recording_for, sync);
        xhr.send(fd);
        
         //var recordedBlob = recordRTC.getBlob();
        //var formData = new FormData();  formData.append(fileType + '-filename', fileName);formData.append(fileType + '-blob', recordRTC.getBlob()); xhr('save', formData, function (fName) { window.open(location.href + fName); }); function xhr(url, data, callback) { var request = new XMLHttpRequest(); request.onreadystatechange = function () { if (request.readyState == 4 && request.status == 200) { callback(location.href + request.responseText); } }; request.open('POST', url,{timeout: 3000}); request.send(data); }
     // $("#links").append("<a id=lk" + refid + " href=" + stream +  "  download= " + fileName + "> Download Video " + refid + " </a> <br>" );
      //videoList[refid]= stream;
      //var bname = "Replay_Video_" + refid;
     // $("#views").append("<input type=button id=vw" + refid + " onclick=replay(" + refid + ") value=" + bname + "> <br>");
      refid += 1;
    }
    function playvideo(stream){
      videoPlayback.src = stream;
      videoPlayback.play();
    }

    function starttimer(){
      counter = 0;
      enableCounter = true;
      updateCounterDisplay();
      setTimeout(ticktock, 100);
    }
    function stoptimer(){
      enableCounter = false;
    }

    function ticktock() {
      if(enableCounter){
        counter += .1;
        updateCounterDisplay();
        setTimeout(ticktock, 100);
      }
    }
    function updateCounterDisplay(){
      $("#counter").html(Math.round(counter * 10) / 10);
    }
    function recordtimer(timevalue){
      recordtime = $("#videotime").val();
      setTimeout(stop, recordtime * 1000);
    }

  </script>


</body>
<script>
$(document).ready(function(){
	$('.score').hide();
	$('.exit_button').hide();
	$('.options').hide();
	$('.survey').hide();
	$('#video-btn').hide();
	$('.hourclass').show();
	if ($('#coming_from').val() != "result"){
	$('.hourclass').hide();
	}
	$('.action_note').hide();
});

$('button').click(function() {
	if ($(this).val() == "submit"){
		var option=($('input[name=user_option]:checked').val());
		$.ajax({
        url: "/save_survey_details",
        data: { value: option},
        type: 'get', 
        success: function(result){
           window.location.href="/calculate_round";
    }
        });
	}
});

setTimeout(function() {
    if ($('#coming_from').val() == "result"){
    	    $('.hourclass').hide();
        	$('.score').show();
    }
}, (record_time / 2) * 1000);

setTimeout(function() {
    if ($('#coming_from').val() == "result"){
         window.location.href="/results?from=vdo";
    }
}, (parseInt(record_time) + 2) * 1000);

</script>

</html>